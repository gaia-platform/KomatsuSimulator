
/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include "gaia/logger.hpp"

#include "gaia_danger_zone.h"
#include "danger_zone.hpp"
#include "zones.hpp"

#define DirectionZoneCodeDefault 6

// Set these to what you want to log, add or subtract at will.
std::vector<std::string> topics{"/image", "/lidar"};

// Set this to an existing directory + desired log name.
std::string log_file_base_name = "~/logs/retrolog";

const int c_log_seconds_past = 5;
const int c_log_seconds_forward = 25;

using namespace gaia::danger_zone;

ruleset danger_zone_ruleset
{
    on_insert(detection)
    {
        std::shared_ptr<obstacles_t> obstacles = obstacles_t::new_instance();

        for (detection->obj:d_object)
        {
            // Sets the zone using the distance from the sensor to the detected object.
            // TODO: unclear why pos_z works better than pos_y (this is how it was at the beginning).s
            obj.zone_id = zones_t::get_range_zone_id(obj.pos_x, obj.pos_z);

            // Find the direction of the object relative to the sensor.
            uint8_t direction_zone = DirectionZoneCodeDefault;

            // Create a message for each obstacle.
            // TODO: the first argument is the class_id and is currently not used
            //  by the simulation. Putting a placeholder for now.
            obstacles->add(
                "placeholder", obj.zone_id, direction_zone,
                obj.pos_x, obj.pos_y, obj.pos_z,
                obj.size_x, obj.size_y, obj.size_z,
                obj.orient_x, obj.orient_y, obj.orient_z, obj.orient_w);
        }

        // Now that all obstacle messages have been collected, we can send them.
        danger_zone_t::get_instance()->send_obstacle_array_message(
            obstacles,
            detection.frame_id, detection.seconds, detection.nseconds);
    }

    on_update(d_object.zone_id)
    {
        object_t obj = *object_t::list()
                   .where(object_expr::id == d_object.object_id)
                   .begin();

        if (obj.zone_id() != d_object.zone_id)
        {
            gaia_log::app().info(
                "Object:{} transitioning from zone:{} to zone:{}",
                obj.id(), zones_t::zone_id_str(obj.zone_id()),
                zones_t::zone_id_str(d_object.zone_id));

            object_writer obj_w = obj.writer();
            obj_w.zone_id = d_object.zone_id;
            obj_w.update_row();
        }
    }
}
