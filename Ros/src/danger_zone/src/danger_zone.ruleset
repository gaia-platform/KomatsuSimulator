
/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <cmath>

#include "danger_zone.hpp"
#include "zones.hpp"

#define RoiZoneCodeRed 0
#define RoiZoneCodeYellow 1
#define RoiZoneCodeGreen 2
#define RoiZoneCodeDefault 3

#define DirectionZoneCodeDefault 6

const double c_red_zone_range = 10.0;
const double c_yellow_zone_range = 20.0;
const double c_green_zone_range = 1000.0;

const int c_log_seconds_past = 5;
const int c_log_seconds_forward = 25;

// Set these to what you want to log, add or subtract at will.
std::vector<std::string> topics{"/image", "/lidar"};

// Set this to an existing directory + desired log name.
std::string log_file_base_name = "~/logs/retrolog";

// Helper functions.
//
uint get_roi_zone(double pos_x, double pos_z)
{
    // Find the distance from the sensor to the detected object.
    double range = zones_t::get_range(pos_x, pos_z);

    // Set roi zone to default value.
    uint roi_zone = RoiZoneCodeDefault;

    if (range < c_red_zone_range)
    {
        roi_zone = RoiZoneCodeRed;
    }
    else if (range < c_yellow_zone_range)
    {
        roi_zone = RoiZoneCodeYellow;
    }
    else if (range < c_green_zone_range)
    {
        roi_zone = RoiZoneCodeGreen;
    }

    return roi_zone;
}

// Here we define our declarative rules.
//
ruleset danger_zone_ruleset
{
    on_insert(detection)
    {
        std::shared_ptr<obstacles_t> obstacles = obstacles_t::new_instance();

        for (detection->D:d_object)
        {
            uint roi_zone;
            roi_zone = get_roi_zone(D.pos_x, D.pos_z);

            // Create a message for each obstacle.
            obstacles->add(
                D.class_id, roi_zone, DirectionZoneCodeDefault,
                D.pos_x, D.pos_y, D.pos_z,
                D.size_x, D.size_y, D.size_z,
                D.orient_x, D.orient_y, D.orient_z, D.orient_w);

            // Trigger a logging event.
            if (roi_zone == RoiZoneCodeRed)
            {
                danger_zone_t::get_instance()->trigger_log(
                    c_log_seconds_past, c_log_seconds_forward, log_file_base_name, topics);
            }
        }

        // Now that all obstacle messages have been collected, we can send them.
        danger_zone_t::get_instance()->send_obstacle_array_message(
            obstacles,
            detection.frame_id, detection.seconds, detection.nseconds);
    }
}
