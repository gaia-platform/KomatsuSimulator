
/////////////////////////////////////////////
// Copyright (c) Gaia Platform LLC
// All rights reserved.
/////////////////////////////////////////////

#include <cmath>

#include "danger_zone.hpp"

#define RoiZoneCodeRed 0
#define RoiZoneCodeYellow 1
#define RoiZoneCodeGreen 2
#define RoiZoneCodeDefault 3

#define DirectionZoneCodeDefault 6

// Set these to what you want to log, add or subtract at will.
std::vector<std::string> topics{"/image", "/lidar"};

// Set this to an existing directory + desired log name.
std::string log_file_base_name = "~/logs/retrolog";

// void show_message(const std::string message)
// {
//     printf("%s", message.c_str());
// }

//*****************************************************************************
//*
//* args:
//*   double x : one axis
//*   double y : the other axis
//*
//*****************************************************************************

double get_range(double x, double y)
{
    return std::sqrt(x * x + y * y);
}

//*****************************************************************************
//*
//* args:
//*   double z : front +
//*   double x : right +
//*
//*****************************************************************************

double red_zone_range = 10.0;
double yellow_zone_range = 20.0;
double green_zone_range = 1000.0;

uint get_roi_zone(double pos_x, double pos_z)
{
    // Find the distance from the sensor to the detected object.
    double range = get_range(pos_x, pos_z);

    // Set roi zone to default value.
    uint roi_zone = RoiZoneCodeDefault;

    if (range < red_zone_range)
    {
        roi_zone = RoiZoneCodeRed;
    }
    else if (range < yellow_zone_range)
    {
        roi_zone = RoiZoneCodeYellow;
    }
    else if (range < green_zone_range)
    {
        roi_zone = RoiZoneCodeGreen;
    }

    return roi_zone;
}

// Here we define our declarative rules.
//
ruleset danger_zone_ruleset
{
    on_insert(detection)
    {
        // TODO: collect detected objects, fire message, then delete the data from the database.
    }

    on_insert(d_object)
    {
        uint roi_zone = get_roi_zone(d_object.pos_x, d_object.pos_z);

        // TODO: get direction code
        uint direction_zone = DirectionZoneCodeDefault;

        danger_zone_t::get_callback_class()->cb_send_obstacle_array_message(
            d_object.class_id, roi_zone, direction_zone,
            d_object.pos_x, d_object.pos_y, d_object.pos_z,
            d_object.size_x, d_object.size_y, d_object.size_z,
            d_object.orient_x, d_object.orient_y, d_object.orient_z, d_object.orient_w,
            d_object.frame_id, d_object.seconds, d_object.nseconds);

        // TODO: we need to debounce this somewhere.
        // TODO: we need to make unique file names, maybe append datetime.

        // Trigger a logging event.
        if (roi_zone == RoiZoneCodeRed)
        {
            danger_zone_t::get_callback_class()->cb_trigger_log(
                5, 25, log_file_base_name, topics);
        }
    }
}
