#include <atomic>
#include <algorithm>
#include <string.h>
#include <memory>
#include <cmath>
#include "idanger_zone.hpp"

#define RoiZoneCodeRed 0
#define RoiZoneCodeYellow 1
#define RoiZoneCodeGreen 2
#define RoiZoneCodeDefault 3

#define DirectionZoneCodeDefault 6

// set these to what you want to log, add or subtract at will
std::vector<std::string> topics{"/image", "/lidar"}; 

// set this to an existing directory + desired log name
std::string log_file_base_name = "~/logs/retrolog";  

/*void show_message(const std::string message)
{
    printf("%s", message.c_str());
}*/

//*****************************************************************************
//*
//* args: 
//*   double x : one axis
//*   double y : the other axis  
//*
//*****************************************************************************

double get_range(double x, double y) 
{
    return std::sqrt(x*x + y*y);
}

//*****************************************************************************
//*
//* args: 
//*   double z : front +
//*   double x : right +
 //*
//*****************************************************************************

/*  static double get_direction(double z, double x) 
  {
    return std::atan2(z, x); 
  }*/

double red_zone_range = 10.0;
double yellow_zone_range = 20.0;
double green_zone_range = 1000.0;

// Here we define our declarative rules
//
ruleset danger_zone_ruleset
{
    on_insert(dobject)
    {
        // find the distance from the sensor to the detected object
        double range = get_range(dobject.pos_x, dobject.pos_z);

        // find the direction of the object relative to the sensor
        //double direction = get_direction(dobject.pos_z, dobject.pos_x);

        // set roi zone to default value
        uint roi_zone = RoiZoneCodeDefault;
        uint direction_zone = DirectionZoneCodeDefault;
        
        if( red_zone_range > range )
            roi_zone = RoiZoneCodeRed;
        else if( yellow_zone_range > range )
            roi_zone = RoiZoneCodeYellow;
        else if( green_zone_range > range )
            roi_zone = RoiZoneCodeGreen;

        //TODO : get direction code

        iDangerZone::get_callback_class()->cb_send_obstacleArray_message(
            dobject.class_id, roi_zone, direction_zone,
            dobject.pos_x, dobject.pos_y, dobject.pos_z,  
            dobject.size_x, dobject.size_y, dobject.size_z,  
            dobject.orient_x, dobject.orient_y, dobject.orient_z, dobject.orient_w,
            dobject.frame_id, dobject.seconds, dobject.nseconds 
        );

        //TODO: we need to debounce this somewhere
        //TODO: we need to make unique file names, maybe append datetime

        //Trigger a logging event
        if(roi_zone == RoiZoneCodeRed)
            iDangerZone::get_callback_class()->cb_trigger_log( 
                5, 25, log_file_base_name, topics);
    }  
}

